@page "/assessmentPage"

<h3>@Title</h3>
<div>
    <EditForm Model="@model" OnValidSubmit="OnValidSubmit">
        <DataAnnotationsValidator />
                    <MudCardContent>
            @if (!Questions.Any())
            {
                <MudSelect T="string" Label="Select Program" @bind-Value="model.Program" AnchorOrigin="Origin.BottomCenter" Variant="Variant.Outlined"
                       RequiredError="Program is required!" For="@(() => model.Program)">
                @foreach (var p in programs)
                {
                    <MudSelectItem T="string" Value="@p.ProgramId">@p.Name</MudSelectItem>
                }
            </MudSelect>
            <MudSelect T="string" Label="Select Subject" @bind-Value="model.Subject" AnchorOrigin="Origin.BottomCenter" Variant="Variant.Outlined"
                       RequiredError="Program is required!" For="@(() => model.Subject)">
                @foreach (var p in subject)
                {
                    <MudSelectItem T="string" Value="@p">@p</MudSelectItem>
                }
            </MudSelect>
            <MudSelect T="string" Label="Select Class" @bind-Value="model.Class" AnchorOrigin="Origin.BottomCenter" Variant="Variant.Outlined"
                       RequiredError="Program is required!" For="@(() => model.Class)">
                @foreach (var p in nclass)
                {
                    <MudSelectItem T="string" Value="@p">@p</MudSelectItem>
                }
            </MudSelect>

            <br />
            }
            else if (Title == "Comment")
            {
                <AssessmentComment Questions="@Questions"/>
            }
            else
            {
                <AssessmentCategory Questions="@Questions"/>
            }
            

            </MudCardContent>
            <MudCardActions>
            @if (!Questions.Any())
            {
                <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto" @onclick="@(() => Start())">Start</MudButton>
            }
            else if (Title == "Comment")
            {
                <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Finish</MudButton>
            }
            else
            {
                <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto" @onclick="@(() => MoveNext())">Next</MudButton>
            }
            </MudCardActions>
    </EditForm>
    </div>

@code {
    private IEnumerable<ProgramDto> programs { get; set; } = new List<ProgramDto>();
    bool success;
    QuestionDto model = new QuestionDto();
    string[] errors = { };
    string[] category;
    string[] nclass;
    string[] subject;
    public string TextValue { get; set; }
    BlazoredTextEditor QuillHtml;
    string QuillHTMLContent;
    string? Title;
    bool hasComment;

    private IEnumerable<QuestionDto> Questions = new List<QuestionDto>();
    private IEnumerable<QuestionDto> questions = new List<QuestionDto>();
    private IEnumerable<GroupedQuestion> groupedQuestions;
    IEnumerator<GroupedQuestion> enumerator;

    private async void OnValidSubmit(EditContext context)
    {
        //QuillHTMLContent = await QuillHtml.GetHTML();
        //model.Question = QuillHTMLContent;
        // var response = await Http.PostAsJsonAsync("api/Question/AddQuestion", model);
    }
    protected override async Task OnInitializedAsync()
    {
        Title = "AssessmentPage";
        programs = new List<ProgramDto> {
        new ProgramDto { ProgramId = "General Science", Name = "General Science" },
        new ProgramDto { ProgramId = "Agriculture Science", Name = "Agriculture Science" } };
        nclass = new string[] { "S.H.S 1", "S.H.S 2", "S.H.S 3" };
        subject = new string[] { "English Language", "Mathematics", "Integrated Science" };

        var result = await Http.GetFromJsonAsync<List<QuestionDto>>("api/Question/GetQuestions");
        if (result is not null)
        {
            questions = result;
        }
        else
        {
            questions = new List<QuestionDto>();
        }
        //await InvokeAsync(StateHasChanged);
    }

    private void Start()
    {
        groupedQuestions = questions.Where(x => x.Program == model.Program && x.Subject == model.Subject && x.Class == model.Class)
        .GroupBy(x=>x.Category)
        .Select(x => new GroupedQuestion (x.Key, x.ToList()))
        .ToList();
        enumerator = groupedQuestions.GetEnumerator();
        MoveNext();
    }

    private void MoveNext()
    {
        if (enumerator.MoveNext())
        {
            Title = enumerator.Current.Category;
            Questions = enumerator.Current.Questions;
        }
    }
}

