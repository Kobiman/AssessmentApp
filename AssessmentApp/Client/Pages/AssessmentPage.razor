@page "/assessmentPage"

<h3>AssessmentPage</h3>
<div>
    <EditForm Model="@model" OnValidSubmit="OnValidSubmit">
        <DataAnnotationsValidator />
                    <MudCardContent>
            <MudSelect T="string" Label="Select Program" @bind-Value="model.Program" AnchorOrigin="Origin.BottomCenter" Variant="Variant.Outlined"
                       RequiredError="Program is required!" For="@(() => model.Program)">
                @foreach (var p in programs)
                {
                    <MudSelectItem T="string" Value="@p.ProgramId">@p.Name</MudSelectItem>
                }
            </MudSelect>
            <MudSelect T="string" Label="Select Subject" @bind-Value="model.Subject" AnchorOrigin="Origin.BottomCenter" Variant="Variant.Outlined"
                       RequiredError="Program is required!" For="@(() => model.Subject)">
                @foreach (var p in subject)
                {
                    <MudSelectItem T="string" Value="@p">@p</MudSelectItem>
                }
            </MudSelect>
            <MudSelect T="string" Label="Select Class" @bind-Value="model.Class" AnchorOrigin="Origin.BottomCenter" Variant="Variant.Outlined"
                       RequiredError="Program is required!" For="@(() => model.Class)">
                @foreach (var p in nclass)
                {
                    <MudSelectItem T="string" Value="@p">@p</MudSelectItem>
                }
            </MudSelect>

            <br />
            </MudCardContent>
            <MudCardActions>
                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Save</MudButton>
            </MudCardActions>
    </EditForm>
    </div>

@code {
    private IEnumerable<ProgramDto> programs { get; set; } = new List<ProgramDto>();
    bool success;
    QuestionDto model = new QuestionDto();
    string[] errors = { };
    string[] category;
    string[] nclass;
    string[] subject;
    public string TextValue { get; set; }
    BlazoredTextEditor QuillHtml;
    string QuillHTMLContent;

    private async void OnValidSubmit(EditContext context)
    {
        //QuillHTMLContent = await QuillHtml.GetHTML();
        //model.Question = QuillHTMLContent;
       // var response = await Http.PostAsJsonAsync("api/Question/AddQuestion", model);
    }
    protected override async Task OnInitializedAsync()
    {
        programs = new List<ProgramDto> {
        new ProgramDto { ProgramId = "General Science", Name = "General Science" },
        new ProgramDto { ProgramId = "Agriculture Science", Name = "Agriculture Science" } };
        nclass = new string[] { "S.H.S 1", "S.H.S 2", "S.H.S 3" };
        subject = new string[] { "English Language", "Mathematics", "Integrated Science" };
    }
}
