@page "/questions"
<MudText Typo="Typo.h6">Questions</MudText>
<MudButton Variant="Variant.Filled" Height="200px" Color="Color.Primary" @onclick="@(() => Navigation.NavigateTo("addQuestion"))">Add</MudButton>
<div style="margin-top: 10px;">
    <MudTable Items="@Elements" Dense="@dense" Hover="@hover" Bordered="@bordered" Striped="@striped" @bind-SelectedItem="selectedItem1">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Questions</MudText>
            <MudSpacer />
        </ToolBarContent>
        <HeaderContent>
            <MudTh>Program</MudTh>
            <MudTh>Subject</MudTh>
            <MudTh>Class</MudTh>
            <MudTh>Category</MudTh>
            <MudTh>Question</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Program">@context.Program</MudTd>
            <MudTd DataLabel="Subject">@context.Subject</MudTd>
            <MudTd DataLabel="Class">@context.Class</MudTd>
            <MudTd DataLabel="Category">@context.Category</MudTd>
            <MudTd DataLabel="Question">@context.Question</MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>

</div>
@code {
    private bool dense = false;
    private bool hover = true;
    private bool striped = false;
    private bool bordered = false;
    private string searchString1 = "";
    private QuestionDto selectedItem1 = null;
    private HashSet<QuestionDto> selectedItems = new HashSet<QuestionDto>();

    private IEnumerable<QuestionDto> Elements = new List<QuestionDto>();

    protected async override void OnInitialized()
    {
        var result = await Http.GetFromJsonAsync<List<QuestionDto>>("api/Question/GetQuestions");
        if (result is not null)
        {
            Elements = result;
        }
        else
        {
            Elements = new List<QuestionDto>();
        }
        await InvokeAsync(StateHasChanged);
    }

    private bool FilterFunc1(QuestionDto element) => FilterFunc(element, searchString1);

    private bool FilterFunc(QuestionDto element, string searchString)
    {
        //if (string.IsNullOrWhiteSpace(searchString))
        //    return true;
        //if (element.Sign.Contains(searchString, StringComparison.OrdinalIgnoreCase))
        //    return true;
        //if (element.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
        //    return true;
        //if ($"{element.Number} {element.Position} {element.Molar}".Contains(searchString))
        //    return true;
        return false;
    }
}
